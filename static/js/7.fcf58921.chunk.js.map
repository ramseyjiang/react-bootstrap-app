{"version":3,"sources":["services/ExchangeReducer.js","contexts/ExchangeContext.js","components/exchange/CurrentExchangeRate.jsx","services/CoinReducer.js","contexts/CoinContext.js","components/coins/CurrentPrice.jsx","views/CoinPage.jsx"],"names":["CURRENCIES","initState","data","initialized","rates","base","tableKeys","AUD","CNY","NZD","SGD","barData","loading","errorMessage","exchangeReducer","state","action","type","generateBarData","Error","filteredRates","Object","keys","filter","key","includes","labels","datasets","backgroundColor","map","ExchangeContext","createContext","ExchangeContextProvider","children","useReducer","dispatch","getLatestExchangeRate","useCallback","get","EXCHANGE_API_URL","then","result","exchangeApi","useMemo","Provider","value","CurrentExchangeRate","useContext","useEffect","Container","className","day","month","year","Table","striped","bordered","hover","Math","floor","Number","style","height","width","margin","options","maintainAspectRatio","legend","display","scales","yAxes","ticks","beginAtZero","title","text","btc","ltc","eth","coinReducer","BTC","USD","LTC","ETH","CoinContext","CoinContextProvider","COIN_API_URL","getCoins","coinsApi","CurrentPrice","Alert","variant","RenderLoading","Row","index","Col","Card","bg","Body","Title","Text","toUpperCase","CoinPage"],"mappings":"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","file":"static/js/7.fcf58921.chunk.js","sourcesContent":["export const LOADING = \"LOADING\";\nexport const GET_LATEST_SUCCESS = \"GET_LATEST_SUCCESS\";\nexport const GET_LATEST_FAILURE = \"GET_LATEST_FAILURE\";\n\nconst CURRENCIES = [\"AUD\", \"CNY\", \"NZD\", \"SGD\"];\n\nexport const initState = {\n  data: {\n    initialized: false,\n    rates: {},\n    base: \"USD\",\n    tableKeys: {\n      AUD: \"AUD\",\n      CNY: \"CNY\",\n      NZD: \"NZD\",\n      SGD: \"SGD\"\n    },\n    barData: {}\n  },\n  loading: false,\n  errorMessage: null\n};\n\nexport const exchangeReducer = (state, action) => {\n  switch (action.type) {\n    case LOADING: {\n      return { ...state, loading: true };\n    }\n    case GET_LATEST_SUCCESS: {\n      return {\n        ...initState,\n        data: {\n          initialized: true,\n          rates: action.data.rates,\n          base: action.data.base,\n          barData: generateBarData(action.data.rates),\n          tableKeys: initState.data.tableKeys\n        }\n      };\n    }\n    case GET_LATEST_FAILURE: {\n      return {\n        ...initState,\n        errorMessage: \"Something wrong!\"\n      };\n    }\n    default:\n      throw new Error();\n  }\n};\n\nconst generateBarData = rates => {\n  let filteredRates = Object.keys(rates).filter(key =>\n    CURRENCIES.includes(key)\n  );\n\n  return {\n    labels: filteredRates,\n    datasets: [\n      {\n        backgroundColor: \"green\",\n        data: filteredRates.map(key => rates[key])\n      }\n    ]\n  };\n};\n","import React, {\n  createContext,\n  useMemo,\n  useContext,\n  useCallback,\n  useReducer\n} from \"react\";\nimport {\n  initState,\n  exchangeReducer,\n  GET_LATEST_SUCCESS,\n  GET_LATEST_FAILURE\n} from \"../services/ExchangeReducer\";\n\nimport { get } from \"../components/common/utils/Request\";\n\nconst ExchangeContext = createContext();\n\nconst ExchangeContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(exchangeReducer, initState);\n  const EXCHANGE_API_URL = \"https://api.exchangeratesapi.io/\";\n\n  const getLatestExchangeRate = useCallback(() => {\n    get(EXCHANGE_API_URL + \"latest?base=USD\").then(result => {\n      try {\n        dispatch({ type: GET_LATEST_SUCCESS, data: result });\n      } catch {\n        dispatch({ type: GET_LATEST_FAILURE, data: result });\n      }\n    });\n  }, []);\n\n  const exchangeApi = useMemo(() => ({ state, getLatestExchangeRate }), [\n    state,\n    getLatestExchangeRate\n  ]);\n\n  return (\n    <ExchangeContext.Provider value={{ exchangeApi }}>\n      {children}\n    </ExchangeContext.Provider>\n  );\n};\n\nexport const useExchangeContext = () => {\n  return useContext(ExchangeContext);\n};\n\nexport default ExchangeContextProvider;\n","import React, {useEffect} from \"react\";\nimport { Table, Container } from \"react-bootstrap\";\nimport { Bar } from \"react-chartjs-2\";\nimport { useExchangeContext } from \"../../contexts/ExchangeContext\";\nimport {year, month, day} from \"../common/utils/Date.js\"\n\nconst CurrentExchangeRate = () => {\n  const { exchangeApi } = useExchangeContext();\n\n  useEffect(() => {\n    exchangeApi.getLatestExchangeRate();\n  }, []);\n\n  const options = {\n    maintainAspectRatio: false,\n    legend: { display: false },\n    scales: {\n      yAxes: [{ ticks: { beginAtZero: true } }],\n    },\n    title: {\n      display: true,\n      text: \"USD Exchanges Rates\",\n    },\n  };\n  \n  return (\n    <Container className=\"exchange-rate-bg rounded\">\n      <h3 className=\"text-center\">Exchange rates on {day()}-{month()}-{year()}</h3>\n\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>#</th>\n            {Object.keys(exchangeApi.state.data.tableKeys).map(key => (\n              <th key={key}>{key}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>USD</td>\n            {exchangeApi.state.data.initialized && Object.keys(exchangeApi.state.data.tableKeys).map(key => (\n              <td key={key}>{Math.floor(Number(exchangeApi.state.data.rates[key]) * 100) / 100}</td>\n            ))}\n          </tr>\n        </tbody>\n      </Table>\n\n      <div style={{ height: \"200px\", width:\"auto\", margin: \"0 auto\" }}>\n        <Bar data={exchangeApi.state.data.barData} options={options} />\n      </div>\n    </Container>\n  );\n};\n\nexport default CurrentExchangeRate;","// Actions\nexport const LOADING = \"LOADING\";\nexport const GET_COIN_SUCCESS = \"GET_COIN_SUCCESS\";\nexport const GET_COIN_FAILURE = \"GET_COIN_FAILURE\";\n\nexport const initState = {\n  data: {\n    btc: \"\",\n    ltc: \"\",\n    eth: \"\",\n  },\n  loading: false,\n  errorMessage: null,\n};\n\nexport const coinReducer = (state, action) => {\n  switch (action.type) {\n    case LOADING: {\n      return { ...state, loading: true };\n    }\n    case GET_COIN_SUCCESS: {\n      return {\n        ...initState,\n        data: {\n          btc: action.data.BTC.USD,\n          ltc: action.data.LTC.USD,\n          eth: action.data.ETH.USD,\n        },\n      };\n    }\n    case GET_COIN_FAILURE: {\n      return {\n        ...initState,\n        errorMessage: \"Something wrong!\",\n      };\n    }\n    default:\n      throw new Error();\n  }\n};\n","import React, {\n  createContext,\n  useMemo,\n  useContext,\n  useCallback,\n  useReducer,\n} from \"react\";\nimport {\n  initState,\n  coinReducer,\n  LOADING,\n  GET_COIN_SUCCESS,\n  GET_COIN_FAILURE,\n} from \"../services/CoinReducer\";\nimport { get } from \"../components/common/utils/Request\";\n\nconst CoinContext = createContext();\n\nconst CoinContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(coinReducer, initState);\n\n  const COIN_API_URL =\n    \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD\";\n\n  const loading = useCallback(() => dispatch({ type: LOADING }), []);\n\n  const getCoins = useCallback(() => {\n    get(COIN_API_URL).then((result) => {\n      try {\n        dispatch({ type: GET_COIN_SUCCESS, data: result });\n      } catch {\n        dispatch({ type: GET_COIN_FAILURE, data: result });\n      }\n    });\n  }, [COIN_API_URL]);\n\n  const coinsApi = useMemo(() => ({ state, getCoins, loading }), [\n    state,\n    getCoins,\n    loading,\n  ]);\n\n  return (\n    <CoinContext.Provider value={{ coinsApi }}>{children}</CoinContext.Provider>\n  );\n};\n\nexport const useCoinContext = () => {\n  return useContext(CoinContext);\n};\n\nexport default CoinContextProvider;\n","import React, { useEffect } from \"react\";\nimport { useCoinContext } from \"../../contexts/CoinContext\";\nimport RenderLoading from '../common/utils/RenderLoading';\nimport { Row, Col, Card, Alert, Container } from \"react-bootstrap\";\n\nconst CurrentPrice = () => {\n  const { coinsApi } = useCoinContext();\n\n  useEffect(()=>{\n    coinsApi.loading();\n    coinsApi.getCoins();\n    // setInterval(() => (coinsApi.getCoins()), 10000);//When it is switched to the other link it will show the warning in the comment. \n    //to do abort soon\n    /*\n    Our component “subscribes” to the promise, but it never “unsubscribes” or cancels the request. \n    If for any reason, our component is unmounted before the promise resolves, our code will try to “set state” (calling setBananas) on an unmounted component. This will throw a warning:\n    Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application.\n    To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\n    */ \n  }, []);\n\n  return (\n    <Container className=\"coins-bg rounded\">\n      <Alert className=\"justify-content-center\" variant='primary'>The first part is a real time price about BTC, ETH and LTC.</Alert>\n      {coinsApi.state.loading && !coinsApi.state.errorMessage ? (\n          <RenderLoading />\n        ) : \n      (<Row>\n        {Object.keys(coinsApi.state.data).map((key, index) => (\n          <Col key={index} className=\"col-4 dog-card-margin\">\n            <Card className=\"text-center\" bg=\"info\">\n              <Card.Body>\n                <Card.Title>${coinsApi.state.data[key]}</Card.Title>\n                <Card.Text>1 {key.toUpperCase()}</Card.Text>\n              </Card.Body>\n            </Card>\n          </Col>\n        ))}\n      </Row>)}\n    </Container>\n  );\n};\n\nexport default CurrentPrice;","import React from \"react\";\n\nimport ExchangeContextProvider from \"../contexts/ExchangeContext\";\nimport CurrentExchangeRate from '../components/exchange/CurrentExchangeRate';\n\nimport CoinContextProvider from \"../contexts/CoinContext\";\nimport CurrentPrice from \"../components/coins/CurrentPrice\";\n\nconst CoinPage = () => {\n  return (\n    <>\n      <CoinContextProvider>\n        <CurrentPrice />\n      </CoinContextProvider>\n      <ExchangeContextProvider>\n        <CurrentExchangeRate />\n      </ExchangeContextProvider>\n    </>\n  );\n};\n\nexport default CoinPage;"],"sourceRoot":""}